from base_functions import *



# свойства веществ:
def H2S(_):
    H2S = {'молярная масса': dec(34.082),
           'мольный объём': ((32.9,), (1,)),
           'вязкость': {'при н.у.': 11.66 * 10 ** (-6), 'сазерленд': 331, 'функция температуры': (0, '')},
           'плотность': ('газ',),
           'источник': 'Романков, Сазерленд из неизвестного источника'}
    return H2S

def CO2(_):
    CO2 = {'молярная масса': dec(44.01),
       'мольный объём': ((34,), (1,)),
       'вязкость': {'при н.у.': 13.7 * 10 ** (-6), 'сазерленд': 254, 'функция температуры': (0, '')},
       'плотность': ('газ',),
       'источник': 'Романков'}
    return CO2


@prec5
def PK_C4H6O3(t_1, T_1):
    #пропиленкарбонат
    ma, mb, mc = map(dec, (0.23261, 4.9439 * 10 ** (-3), 4.1034 * 10 ** (-5)))
    ra, rb = map(dec, (1224.9, 1.0358))

    mu = dec((1 / (ma + mb * t_1 + mc * t_1 ** 2)) / 1000)
    rho = ra - rb * t_1
    mu, rho = map(dec, (mu, rho))
    PK_C4H6O3 = {'молярная масса': dec(102.09),
             'мольный объём': ((14.8, 3.7, 9.1, 11.0), (4, 6, 2, 1)),
             'вязкость': {'при н.у.': 0,
                          'сазерленд': 0,
                          'функция температуры': (mu, f"1 / (0.23261 + 4.9439 * 10 ** (-3) * {t_1} + 4.1034 * 10 ** (-5) * {t_1} ** 2) * 1 / 1000 = {mu}")},
             'плотность': ('жидкость', rho, f"1224.9 - 1.0358 * {t_1} = {rho}"),
             'источник': 'Равичев'}
    return PK_C4H6O3


@prec5
def CH3OH(t_1, T_1):
    # метанол
    ma, mb, mc, md = map(dec, (-0.000982, 0.1560, -13.91, 814.47))
    ra, rb = map(dec, (-0.9275, 810.77))
    mu = (ma * t_1 ** 3 + mb * t_1 ** 2 + mc * t_1 + md) / 1000000
    rho = ra * t_1 + rb
    mu, rho = map(dec, (mu, rho))
    CH3OH = {'молярная масса': dec(32.04),
             'мольный объём': ((37,), (1,)),
             'вязкость': {'при н.у.': 0,
                          'сазерленд': 0,
                          'функция температуры': (mu, f"{ma} * t_1 ** 3 + {mb} * t_1 ** 2 + {mc} * t_1 + {md} = {ma} * {t_1} ** 3 + {mb} * {t_1} ** 2 + {mc} * {t_1} + {md} = {mu} Па⋅с")},
             'плотность': ('жидкость', rho, f"{ra} * t_1 + {rb} = {ra} * {t_1} + {rb} = {rho}"),
             'источник': 'Равичев'}
    return CH3OH


def selexol(_):
    # селексол
    print('свойства селексола есть только для температуры 25 по Цельсию')
    selexol = {'молярная масса': dec(295),
             'мольный объём': ((285,), (1,)),
             'вязкость': {'при н.у.': 0,
                          'сазерленд': 0,
                          'функция температуры': (dec(0.0058), f"не доделано")},
             'плотность': ('жидкость', dec(1030), f"не доделано"),
             'источник': ''}
    return selexol


def H2O(_):
    H2O = {}


@prec5
def flot_T_66(t_1, T_1):
    # флотореагент
    ma, mb = map(dec, (1677.3, 4.34))
    ra, rb = map(dec, (1046, 0.848))
    mu = (10 ** (ma / T_1 - mb)) / 1000
    rho = ra - rb * t_1
    mu, rho = map(dec, (mu, rho))
    flot_T_66 = {'молярная масса': dec(160),
                 'мольный объём': ((155,), (1,)),
                 'вязкость': {'при н.у.': 0,
                              'сазерленд': 0,
                              'функция температуры': (mu, f"(10 ** (1677.3 / T - 4.34)) / 1000 = {mu}")},
                 'плотность': ('жидкость', rho, f"1046 - 0.848 * T = {rho}"),
                 'источник': 'Равичев'}
    return flot_T_66


@prec5
def methyl_pyr(t_1, T_1):
    # N-метилпирролидон-2
    ma, mb, mc = map(dec, (0.4527, 4.325 * 10 ** (-3), 6.315 * 10 ** (-5)))
    ra, rb = map(dec, (1051, -1.4428))
    mu = dec((1 / (ma + mb * t_1 + mc * t_1 ** 2)) / 1000)
    rho = ra + rb * t_1
    methyl_pyr = {'молярная масса': dec(99.13),
                 'мольный объём': ((155,), (1,)),
                 'вязкость': {'при н.у.': 0,
                              'сазерленд': 0,
                              'функция температуры': (mu, f"1 / ({ma} + {mb} * t_1 + {mc} * t_1 ** 2) * 1 / 1000 = {mu}")},
                 'плотность': ('жидкость', rho, f"{ra} - {rb} * T = {rho}"),
                 'источник': 'Равичев'}
    return methyl_pyr


def CH4(_):
    CH4 = {'молярная масса': dec(16.04),
           'мольный объём': ((14.8, 3.7), (1, 4)),
           'вязкость': {'при н.у.': 10.28 * 10 ** (-6), 'сазерленд': 164, 'функция температуры': (0, '')},
           'плотность': ('газ',),
           'источник': 'Романков'}
    return CH4
def nat_gas(_):
    nat_gas = {'молярная масса': dec(18),
               'мольный объём': ((31.4,), (1,)),
               'вязкость': {'при н.у.': 10 * 10 ** (-6), 'сазерленд': 246, 'функция температуры': (0, '')},
               'плотность': ('газ',),
               'источник': 'Равичев'}
    return nat_gas
def H2(_):
    H2 = {'молярная масса': dec(2.016),
               'мольный объём': ((14.3,), (1,)),
               'вязкость': {'при н.у.': 8.42 * 10 ** (-6), 'сазерленд': 84.4, 'функция температуры': (0, '')},
               'плотность': ('газ',),
               'источник': 'Равичев'}
    print("не подтвержден сазерленд!")
    return H2





def sub_props(sub_name, ind, t_1, T_1):
    '''
    Функция определения некоторых физсвойств некоторых веществ по температуре. Выполняет роль общего "интерфейса" для
    разных веществ, одни и те же свойства которых могут задаваться разными функциями. Очень обскурный принцип работы
    :return: M, nu, mu, rho - Молярная масса, мольный объём, вязкость, плотность
    '''
    data_for_func_dict = {'сероводород': (None,),
                          'углекислый газ': (None,),
                          'пропиленкарбонат': (t_1, T_1),
                          'метанол': (t_1, T_1),
                          'селексол': (None,),
                          'вода': (None,),
                          'флотореагент т-66': (t_1, T_1),
                          'метилпирролидон': (t_1, T_1),
                          'метан': (None,),
                          'природный газ': (None,),
                          'водород': (None,)
                          }

    subs_dict = {'сероводород': H2S,
                 'углекислый газ': CO2,
                 'пропиленкарбонат': PK_C4H6O3,
                 'метанол': CH3OH,
                 'селексол': selexol,
                 'вода': H2O,
                 'флотореагент т-66': flot_T_66,
                 'метилпирролидон': methyl_pyr,
                 'метан': CH4,
                 'природный газ': nat_gas,
                 'водород': H2
                 }

    sub = subs_dict[sub_name](*data_for_func_dict[sub_name])

    M = sub['молярная масса']
    if len(sub['мольный объём'][1]) == 1:
        nu = dec(sub['мольный объём'][0][0])
        nu_formula = dec(nu)
    else:
        nu = 0
        nu_formula = ''
        for i in range(len(sub['мольный объём'][0])):
            nu += (sub['мольный объём'][0][i] * sub['мольный объём'][1][i])
            nu_formula += f"{sub['мольный объём'][0][i]}⋅{sub['мольный объём'][1][i]}+"
        nu = dec(nu)
        nu_formula = nu_formula[0:-1] + f'={nu}'

    if sub['вязкость']['при н.у.'] != 0:
        mu_0, C = map(dec, (sub['вязкость']['при н.у.'], sub['вязкость']['сазерленд']))
        C_formula = f"\nКонстанта Сазерленда: C_{ind} = {C}"
        mu = mu_0 * (T_0 + C) / (T_1 + C) * (T_1 / T_0) ** dec(1.5)
        mu_formula = rawTOfinal(f" mu _{ind} = mu _0 * (T_0 + C) / (T + C) * (T / T_0) ** (1.5) = {mu_0 * 10 ** 6} * ({T_0} + {C}) / ({T_1} + {C}) * ({T_1} / {T_0}) ** (1.5) = {mu * 10 ** 6}")
    else:
        C_formula = ''
        mu = sub['вязкость']['функция температуры'][0]  # фактически создаётся лишний раз, см. запись веществ
        mu_formula = rawTOfinal(f" mu _{ind} = " + sub['вязкость']['функция температуры'][1])

    if sub['плотность'][0] == 'жидкость':
        rho = sub['плотность'][1]  # фактически создаётся лишний раз, см. запись веществ
        rho_formula = rawTOfinal(f"Плотность:\n rho _{ind} = " + sub['плотность'][2])
    else:
        rho = 0
        rho_formula = ''
    source = sub['источник']

    M, nu, mu, rho = map(dec, (M, nu, mu, rho))
    print(f"""
{source}
Молярная масса: М_{ind}={M}
Мольный объём для расчёта коэффициента диффузии: {sym['nu']}_{ind}={nu_formula} {C_formula}
Вязкость:
{mu_formula}
{rho_formula}
""")
    return M, nu, mu, rho